-- settings --
local extraPrints = false
local yourLanguage = "en"

--
if extraPrints then
	print("Executed Inline Translator")
end

local usingLegacyChatService = false
local autoTranslateTo = nil
local sendEnabled = true

if game:GetService("TextChatService").ChatVersion == Enum.ChatVersion.LegacyChatService then
	usingLegacyChatService = true
end

local function systemMessage(messageText)
	if usingLegacyChatService then
		local properties = {
			Text = messageText,
			Color = Color3.new(1, 1, 0),
			Font = Enum.Font.SourceSansItalic,
			TextSize = 16
		}

		game:GetService("StarterGui"):SetCore("ChatMakeSystemMessage", properties)
	else
		local color = Color3.new(1, 1, 0)
		local font = Enum.Font.SourceSansItalic
		local textSize = 16

		local function color3ToHex(color)
			local r = math.floor(color.R * 255)
			local g = math.floor(color.G * 255)
			local b = math.floor(color.B * 255)
			return string.format("#%02X%02X%02X", r, g, b)
		end

		local richTextMessage = string.format('<font color="%s" face="%s" size="%d">%s</font>', color3ToHex(color), font.Name, textSize, messageText)

		game.TextChatService.TextChannels.RBXGeneral:DisplaySystemMessage(richTextMessage)
	end
end

if game.Workspace:FindFirstChild("TranslatorInjected") then
	systemMessage("Executing twice will only create more problems if you're trying to fix one.")
	return
else
	local flag = Instance.new("BoolValue")
	flag.Value = true
	flag.Name = "TranslatorInjected"
	flag.Parent = game.Workspace
end

local starterGui = game:GetService("StarterGui")
local RS = game:GetService("ReplicatedStorage")
local Plrs = game:GetService("Players")

--
--
--
-- all of the translating nonsense --
local googlev = isfile'googlev.txt' and readfile'googlev.txt' or ''
local request = request or syn.request

local function got(url, Method, Body)
	Method = Method or "GET"
	local res = request({
		Url = url,
		Method = Method,
		Headers = {cookie="CONSENT=YES+"..googlev},
		Body = Body
	})
	if res.Body:match('https://consent.google.com/s') then
		googleConsent(res.Body)
		res = request({
			Url = url,
			Method = "GET",
			Headers = {cookie="CONSENT=YES+"..googlev}
		})
	end
	return res
end

local function googleConsent(Body)
	local args = {}
	for match in Body:gmatch('<input type="hidden" name=".-" value=".-">') do
		local k, v = match:match('<input type="hidden" name="(.-)" value="(.-)">')
		args[k] = v
	end
	googlev = args.v
	writefile('googlev.txt', args.v)
end

local function stringifyQuery(dataFields)
	local data = ""
	for k, v in pairs(dataFields) do
		if type(v) == "table" then
			for _,v in pairs(v) do
				data = data .. ("&%s=%s"):format(
				game.HttpService:UrlEncode(k),
				game.HttpService:UrlEncode(v)
				)
			end
		else
			data = data .. ("&%s=%s"):format(
			game.HttpService:UrlEncode(k),
			game.HttpService:UrlEncode(v)
			)
		end
	end
	data = data:sub(2)
	return data
end

local function jsonE(o)
	return game:GetService("HttpService"):JSONEncode(o)
end

local function jsonD(o)
	return game:GetService("HttpService"):JSONDecode(o)
end

local languages = {
	auto = "Automatic",
	af = "Afrikaans",
	sq = "Albanian",
	am = "Amharic",
	ar = "Arabic",
	hy = "Armenian",
	az = "Azerbaijani",
	eu = "Basque",
	be = "Belarusian",
	bn = "Bengali",
	bs = "Bosnian",
	bg = "Bulgarian",
	ca = "Catalan",
	ceb = "Cebuano",
	ny = "Chichewa",
	['zh-cn'] = "Chinese Simplified",
	['zh-tw'] = "Chinese Traditional",
	co = "Corsican",
	hr = "Croatian",
	cs = "Czech",
	da = "Danish",
	nl = "Dutch",
	en = "English",
	eo = "Esperanto",
	et = "Estonian",
	tl = "Filipino",
	fi = "Finnish",
	fr = "French",
	fy = "Frisian",
	gl = "Galician",
	ka = "Georgian",
	de = "German",
	el = "Greek",
	gu = "Gujarati",
	ht = "Haitian Creole",
	ha = "Hausa",
	haw = "Hawaiian",
	iw = "Hebrew",
	hi = "Hindi",
	hmn = "Hmong",
	hu = "Hungarian",
	is = "Icelandic",
	ig = "Igbo",
	id = "Indonesian",
	ga = "Irish",
	it = "Italian",
	ja = "Japanese",
	jw = "Javanese",
	kn = "Kannada",
	kk = "Kazakh",
	km = "Khmer",
	ko = "Korean",
	ku = "Kurdish (Kurmanji)",
	ky = "Kyrgyz",
	lo = "Lao",
	la = "Latin",
	lv = "Latvian",
	lt = "Lithuanian",
	lb = "Luxembourgish",
	mk = "Macedonian",
	mg = "Malagasy",
	ms = "Malay",
	ml = "Malayalam",
	mt = "Maltese",
	mi = "Maori",
	mr = "Marathi",
	mn = "Mongolian",
	my = "Myanmar (Burmese)",
	ne = "Nepali",
	no = "Norwegian",
	ps = "Pashto",
	fa = "Persian",
	pl = "Polish",
	pt = "Portuguese",
	pa = "Punjabi",
	ro = "Romanian",
	ru = "Russian",
	sm = "Samoan",
	gd = "Scots Gaelic",
	sr = "Serbian",
	st = "Sesotho",
	sn = "Shona",
	sd = "Sindhi",
	si = "Sinhala",
	sk = "Slovak",
	sl = "Slovenian",
	so = "Somali",
	es = "Spanish",
	su = "Sundanese",
	sw = "Swahili",
	sv = "Swedish",
	tg = "Tajik",
	ta = "Tamil",
	te = "Telugu",
	th = "Thai",
	tr = "Turkish",
	uk = "Ukrainian",
	ur = "Urdu",
	uz = "Uzbek",
	vi = "Vietnamese",
	cy = "Welsh",
	xh = "Xhosa",
	yi = "Yiddish",
	yo = "Yoruba",
	zu = "Zulu"
};

local function isLanguageCodeValid(code)
	for key, _ in pairs(languages) do
		if key == code then
			return true
		end
	end
	return false
end

local function getISOCode(lang)
	for code, name in pairs(languages) do
		if code == lang or name:lower() == lang:lower() then
			return code
		end
	end
	return nil
end

local function translate(str, to, from)
	local reqid = math.random(1000,9999)
	local rpcidsTranslate = "MkEWBc"
	local rootURL = "https://translate.google.com/"
	local executeURL = "https://translate.google.com/_/TranslateWebserverUi/data/batchexecute"
	local InitialReq = got(rootURL)
	local fsid = InitialReq.Body:match('"FdrFJe":"(.-)"')
	local bl = InitialReq.Body:match('"cfb2h":"(.-)"')

	from = from and getISOCode(from) or 'auto'
	to = to and getISOCode(to) or 'en'

	local data = {{str, from, to, true}, {nil}}
	local freq = {{{rpcidsTranslate, jsonE(data), nil, "generic"}}}

	local url = executeURL..'?'..stringifyQuery{rpcids = rpcidsTranslate, ['f.sid'] = fsid, bl = bl, hl="en", _reqid = reqid-10000, rt = 'c'}
	local body = stringifyQuery{['f.req'] = jsonE(freq)}
	local req = got(url, "POST", body)

	local body = jsonD(req.Body:match'%[.-%]\n')
	local translationData = jsonD(body[1][3])
	local result = {
		text = translationData[2][1][1][6][1][1],
		from = {
			language = translationData[3],
			text = translationData[2][5][1]
		}
	}
	return result
end
--

function translateMessage(message, targetLanguage)
	local result = translate(message, targetLanguage, "auto")
	return result.text, result.from.language
end

local function forceChat(text:string)
	if usingLegacyChatService then
		RS.DefaultChatSystemChatEvents.SayMessageRequest:FireServer(text, "All")
	else
		local textchannel = game:GetService("TextChatService"):WaitForChild("TextChannels"):WaitForChild("RBXGeneral")
		local message = text
		textchannel:SendAsync(message)
	end
end

local function auditPlayer(player:Player)
	player.Chatted:Connect(function(message)
		local translatedMessage, sourceLanguage = translateMessage(message, yourLanguage)

		if translatedMessage ~= message and sourceLanguage ~= yourLanguage then -- if the actual message and the translation isnt the same, its a foreign language
			systemMessage("(" ..string.upper(sourceLanguage).. ") " ..player.Name.. ": " ..translatedMessage)
		end
	end)
end

for _, existingPlayer in ipairs(Plrs:GetPlayers()) do
	auditPlayer(existingPlayer)
end

Plrs.PlayerAdded:Connect(function(player)
	auditPlayer(player)
end)

local function onChatFocusLost(Bar)
	return function(Enter, _, ignore)
		if ignore then return end
		if Enter and Bar.Text ~= '' then
			local Message = Bar.Text
			Bar.Text = ''

			if Message:sub(1, 4) == "&gt;" or Message:sub(1, 1) == ">" then
				local textAfterCommand = nil
				if Message:sub(1, 1) == ">" then
					textAfterCommand = Message:sub(2)
				else
					Message:sub(5)
				end

				if isLanguageCodeValid(textAfterCommand) then
					autoTranslateTo = textAfterCommand
				elseif textAfterCommand == "d" then
					systemMessage("Auto-translate disabled.")
					autoTranslateTo = false
				end
			else
				if sendEnabled then
					if autoTranslateTo then
						local translated = translateMessage(Message, autoTranslateTo)

						forceChat(translated)
						
						systemMessage("(" ..string.upper(autoTranslateTo).. ") " ..game.Players.LocalPlayer.Name.. ": " ..translated)
					else
						forceChat(Message)
					end
				else
					-- do nothing
				end
			end
		end
	end
end

local Bar = nil
if not usingLegacyChatService then
	Bar = game.CoreGui.ExperienceChat.appLayout.chatInputBar.Background.Container.TextContainer.TextBoxContainer.TextBox
else
	Bar = game:GetService("Players").LocalPlayer['PlayerGui'].Chat['Frame'].ChatBarParentFrame['Frame'].BoxFrame['Frame'].ChatBar
end

Bar.FocusLost:Connect(onChatFocusLost(Bar))

systemMessage("To send messages in a language, say > followed by the target language code, e.g.: >ru. To disable (go back to original language), say >d.")
systemMessage("Please note this isn't gonna work exactly like the old one because it's an almost from scratch rewrite to support the newer versions of in-game chat. I also have no idea who made the absolute original thanks to shitty showcasers who don't bother to credit anyone for any of the scripts they showcase and still put like 5 linkvertises to get to it.")

if not usingLegacyChatService then
	game.CoreGui.ExperienceChat.appLayout.chatWindow.Visible = true
else
	local chatFrame = game.Players.LocalPlayer.PlayerGui.Chat.Frame

	chatFrame.ChatBarParentFrame.Position = chatFrame.ChatChannelParentFrame.Position + UDim2.new(UDim.new(),chatFrame.ChatChannelParentFrame.Size.Y)
	chatFrame.ChatChannelParentFrame.Visible = true
end

if extraPrints then
	print("Finished executing Inline Translator")
end
